{"IsEnabled":true,"IsCustom":true,"Integration":"GreyNoise","DocumentationLink":null,"Name":"Generate Alert from GreyNoise GNQL","Description":"Provide a GNQL to generate alerts from.  Recommended to run once daily and to ensure the last_seen:1d option is passed to the GNQL.  Each returned IP from the query will create an Alert.","Creator":"Admin","Script":"from constants import USER_AGENT\nfrom greynoise import GreyNoise\nfrom greynoise.exceptions import RateLimitError, RequestFailure\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import output_handler, unix_now\n\nimport sys\n\n\nCONNECTOR_NAME = \"GreyNoise GNQL Connector\"\nVENDOR = \"GreyNoise\"\nPRODUCT = \"GreyNoise\"\n\n\n@output_handler\ndef main(is_test_run):\n    alerts = []\n    siemplify = SiemplifyConnectorExecution()\n    siemplify.script_name = CONNECTOR_NAME\n\n    if is_test_run:\n        siemplify.LOGGER.info(\n            '***** This is an \"IDE Play Button Run Connector once\" test run ******'\n        )\n\n    siemplify.LOGGER.info(\"==================== Main - Param Init ====================\")\n\n    query = siemplify.extract_connector_param(\"query\", print_value=True)\n    limit = siemplify.extract_connector_param(\n        \"limit\", default_value=\"10\", is_mandatory=False, print_value=True\n    )\n    api_key = siemplify.extract_connector_param(\"GN API Key\", print_value=False)\n\n    session = GreyNoise(api_key=api_key, integration_name=USER_AGENT)\n\n    siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n\n    try:\n        res = session.query(query=query, size=limit)\n\n        if res and res[\"count\"] > 0:\n            output = res\n\n            for result in output[\"data\"]:\n                datetime_in_unix_time = unix_now()\n                alert_id = str(datetime_in_unix_time) + \"-\" + result[\"ip\"]\n\n                # Creating the event by calling create_event() function\n                created_event = create_event(\n                    siemplify, alert_id, result, datetime_in_unix_time\n                )\n                # Creating the alert by calling create_alert() function\n                created_alert = create_alert(\n                    siemplify, alert_id, result, datetime_in_unix_time, created_event\n                )\n\n                # Checking that the created_alert is not None\n                if created_alert is not None:\n                    alerts.append(created_alert)\n                    siemplify.LOGGER.info(f\"Added Alert {alert_id} to package results\")\n    except RequestFailure as e:\n        if '401' in str(e):\n            siemplify.LOGGER.error(\n                \"Unable to auth, please check API Key.  This action requires a Paid Subscription.\"\n            )\n        else:\n            siemplify.LOGGER.error(\"There was an issue with your query: {}\".format(e))\n        siemplify.LOGGER.exception(e)\n\n    except Exception as e:\n        siemplify.LOGGER.error(\n            \"Failed to process alert {}\".format(alert_id), alert_id=alert_id\n        )\n        siemplify.LOGGER.exception(e)\n\n    siemplify.LOGGER.info(\"------------------- Main - Finished -------------------\")\n    siemplify.return_package(alerts)\n\n\ndef create_alert(siemplify, alert_id, result, datetime_in_unix_time, created_event):\n    \"\"\"\n    Returns an alert which is one event that contains one unread email message\n    \"\"\"\n    siemplify.LOGGER.info(f\"-------------- Started processing Alert {alert_id}\")\n    alert_info = AlertInfo()\n\n    alert_info.display_id = f\"{alert_id}\"\n    alert_info.ticket_id = f\"{alert_id}\"\n    alert_info.name = (\n        str(result[\"ip\"]) + \" has been observed mass-scanning the internet\"\n    )\n    alert_info.start_time = datetime_in_unix_time\n    alert_info.end_time = datetime_in_unix_time\n    alert_info.SourceAddress = result[\"ip\"]\n    alert_info.EventTime = result[\"last_seen\"]\n    alert_info.rule_generator = \"GreyNoise Ingestion\"\n    alert_info.priority = 60\n    alert_info.device_vendor = VENDOR\n    alert_info.device_product = PRODUCT\n\n    siemplify.LOGGER.info(f\"---------- Events creating started for alert  {alert_id}\")\n    try:\n        if created_event is not None:\n            alert_info.events.append(created_event)\n        siemplify.LOGGER.info(f\"Added Event {alert_id} to Alert {alert_id}\")\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"Failed to process event {alert_id}\")\n        siemplify.LOGGER.exception(e)\n\n    return alert_info\n\n\ndef create_event(siemplify, alert_id, result, datetime_in_unix_time):\n    \"\"\"\n    Returns the digested data of a single unread email\n    \"\"\"\n    siemplify.LOGGER.info(\n        f\"--- Started processing Event:\"\n        f\"  alert_id: {alert_id} | event_id: {alert_id}\"\n    )\n    event = {}\n    event[\"StartTime\"] = datetime_in_unix_time\n    event[\"EndTime\"] = datetime_in_unix_time\n    event[\"event_name\"] = \"Mass Scanning IP Detected\"\n    event[\"device_product\"] = PRODUCT\n\n    event[\"SourceAddress\"] = result[\"ip\"]\n    event[\"EventTime\"] = result[\"last_seen\"]\n    event[\"Classification\"] = result[\"classification\"]\n\n    siemplify.LOGGER.info(\n        f\"--- Finished processing Event:\"\n        f\" alert_id: {alert_id} | event_id: {alert_id}\"\n    )\n    return event\n\n\nif __name__ == \"__main__\":\n    is_test_run = not (len(sys.argv) < 2 or sys.argv[1] == \"True\")\n    main(is_test_run)\n","Version":31,"MappingRules":[],"ProductToVisualFamilyRecords":[],"SimulationUseCases":{"CasesForUseCase":[],"UseCaseName":null},"Parameters":[{"ConnectorDefinitionId":6,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"product","Name":"DeviceProductField","Type":2,"Mode":0,"Description":"The field name used to determine the device product"},{"ConnectorDefinitionId":6,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"event_type","Name":"EventClassId","Type":2,"Mode":0,"Description":"The field name used to determine the event name (sub-type)"},{"ConnectorDefinitionId":6,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"","Name":"GN API Key","Type":3,"Mode":2,"Description":"GreyNoise API Key"},{"ConnectorDefinitionId":6,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"10","Name":"limit","Type":2,"Mode":2,"Description":"The maximum number of results to return. Default is 10."},{"ConnectorDefinitionId":6,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"30","Name":"PythonProcessTimeout","Type":2,"Mode":0,"Description":"The timeout limit (in seconds) for the python process running current script"},{"ConnectorDefinitionId":6,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"ip:89.248.172.0/24 last_seen:1d","Name":"query","Type":2,"Mode":2,"Description":"GNQL Query to Create Alerts from.  Each result of the query will create an alert."}],"Rules":[],"IsConnectorRulesSupported":true,"IsSystem":false,"PythonVersion":"None"}