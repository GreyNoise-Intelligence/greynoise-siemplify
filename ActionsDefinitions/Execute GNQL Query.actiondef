{"Name":"Execute GNQL Query","Description":"Run a GreyNoise GNQL. Consumes 1 Search per IP returned by the query.","Script":"from constants import USER_AGENT\nfrom greynoise import GreyNoise\nfrom greynoise.exceptions import RateLimitError, RequestFailure\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import convert_dict_to_json_result_dict, output_handler\n\nINTEGRATION_NAME = \"GreyNoise\"\n\nSCRIPT_NAME = \"Execute GNQL Query\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n\n    api_key = siemplify.extract_configuration_param(\n        provider_name=INTEGRATION_NAME, param_name=\"GN API Key\"\n    )\n\n    session = GreyNoise(api_key=api_key, integration_name=USER_AGENT)\n\n    query = siemplify.extract_action_param(param_name=\"query\", print_value=True)\n    limit = siemplify.extract_action_param(\n        param_name=\"limit\", default_value=\"10\", is_mandatory=False, print_value=True\n    )\n\n    output_message = \"\"\n    result_value = True\n    status = EXECUTION_STATE_COMPLETED\n    output_json = {}\n\n    siemplify.LOGGER.info(\"Running GreyNoise Query: {}\".format(query))\n    try:\n        res = session.query(query=query, size=limit)\n        output = res\n        siemplify.result.add_json(\"query_result\", output)\n        output_json[\"query_result\"] = output\n        total = output[\"count\"]\n        output_message = (\n            \"Successfully ran query: {} - Total Results: {} - \"\n            \"Returned Results: {},\".format(query, total, limit)\n        )\n    except ValueError as e:\n        siemplify.LOGGER.info(\"Invalid Routable IP: {}\".format(ipaddr))\n        invalid_ips.append(ipaddr)\n\n    except RequestFailure as e:\n        if \"401\" in str(e):\n            siemplify.LOGGER.info(\"Unable to auth, please check API Key\")\n            output_message = \"Unable to auth, please check API Key\"\n        else:\n            siemplify.LOGGER.error(\"There was an issue with your query: {}\".format(e))\n            output_message = \"There was an issue with your query: {}\".format(e)\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n\n    except RateLimitError as e:\n        siemplify.LOGGER.info(\"Daily rate limit reached, please check API Key\")\n        output_message = \"Daily rate limit reached, please check API Key\"\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n\n    except Exception:\n        siemplify.LOGGER.info(\"Unknown Error Occurred\")\n        output_message = \"Unknown Error Occurred\"\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n\n    if output_json:\n        siemplify.result.add_result_json({\"results\": convert_dict_to_json_result_dict(output_json)})\n\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"GreyNoise","ScriptResultName":"success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"results\": [{\"Entity\": \"query_result\", \"EntityResult\": {\"complete\": false, \"count\": 126828, \"data\": [{\"ip\": \"173.56.92.166\", \"seen\": true, \"classification\": \"malicious\", \"spoofable\": false, \"first_seen\": \"2021-01-06\", \"last_seen\": \"2021-02-03\", \"actor\": \"unknown\", \"vpn\": false, \"vpn_service\": \"\", \"tags\": [\"Generic IoT Brute Force Attempt\", \"HTTP Alt Scanner\", \"Mirai\", \"Telnet Bruteforcer\", \"Telnet Scanner\"], \"cve\": [], \"metadata\": {\"asn\": \"AS701\", \"city\": \"New York City\", \"country\": \"United States\", \"country_code\": \"US\", \"organization\": \"MCI Communications Services, Inc. d/b/a Verizon Business\", \"category\": \"isp\", \"tor\": false, \"rdns\": \"pool-173-56-92-166.nycmny.fios.verizon.net\", \"os\": \"Linux 2.2-3.x\", \"region\": \"New York\"}, \"raw_data\": {\"scan\": [{\"port\": 23, \"protocol\": \"TCP\"}, {\"port\": 81, \"protocol\": \"TCP\"}], \"web\": {}, \"ja3\": [], \"hassh\": null}}, {\"ip\": \"116.0.3.146\", \"seen\": true, \"classification\": \"malicious\", \"spoofable\": false, \"first_seen\": \"2019-10-22\", \"last_seen\": \"2021-02-03\", \"actor\": \"unknown\", \"vpn\": false, \"vpn_service\": \"\", \"tags\": [\"Looks Like EternalBlue\", \"SMB Scanner\"], \"cve\": [\"CVE-2017-0144\"], \"metadata\": {\"asn\": \"AS17454\", \"city\": \"Jakarta\", \"country\": \"Indonesia\", \"country_code\": \"ID\", \"organization\": \"PT Hasindo Net\", \"category\": \"isp\", \"tor\": false, \"rdns\": \"\", \"os\": \"Windows 7/8\", \"region\": \"Jakarta\"}, \"raw_data\": {\"scan\": [{\"port\": 445, \"protocol\": \"TCP\"}], \"web\": {}, \"ja3\": [], \"hassh\": null}}], \"message\": \"ok\", \"query\": \"classification:malicious last_seen:1d\", \"scroll\": \"DnF1ZXJ5VGhlbkZldGNoBQAAAAAk0abXFkFKSExEdUc4VEtta2syaGg2R3kzNGcAAAAAJNGm2BZBSkhMRHVHOFRLbWtrMmhoNkd5MzRnAAAAACTRptkWQUpITER1RzhUS21razJoaDZHeTM0ZwAAAAAk0abaFkFKSExEdUc4VEtta2syaGg2R3kzNGcAAAAAJNGm2xZBSkhMRHVHOFRLbWtrMmhoNkd5MzRn\"}}]}","ShowResult":true}],"Creator":"Admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":21.0,"TimeoutSeconds":300,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"classification:malicious last_seen:1d","Description":"GreyNoise Query in GNQL format to execute","Name":"query","Value":"classification:malicious last_seen:1d","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"10","Description":"Maximum number of results to return, default is 10","Name":"limit","Value":"10","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}