{"Name":"Community IP Lookup","Description":"Query an IP in the GreyNoise Community (Free) API","Script":"from constants import COMMUNITY_USER_AGENT\nfrom greynoise import GreyNoise\nfrom greynoise.exceptions import RateLimitError, RequestFailure\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyDataModel import EntityTypes\nfrom SiemplifyUtils import convert_dict_to_json_result_dict, output_handler\n\nINTEGRATION_NAME = \"GreyNoise\"\n\nSCRIPT_NAME = \"Community IP Lookup\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n\n    api_key = siemplify.extract_configuration_param(\n        provider_name=INTEGRATION_NAME, param_name=\"GN API Key\"\n    )\n    \n    session = GreyNoise(api_key=api_key, integration_name=COMMUNITY_USER_AGENT, offering=\"community\")\n\n    ips = [\n        entity\n        for entity in siemplify.target_entities\n        if entity.entity_type == EntityTypes.ADDRESS\n    ]\n\n    output_message = \"Successfully processed:\"\n    result_value = True\n    status = EXECUTION_STATE_COMPLETED\n    output_json = {}\n    invalid_ips = []\n    for ipaddr in ips:\n        siemplify.LOGGER.info(\"Started processing IP: {}\".format(ipaddr))\n        \n        try:\n            res = session.ip(ipaddr)\n\n            if res and res[\"noise\"]:\n\n                siemplify.result.add_json(str(ipaddr), res)\n                output = res\n                output_json[str(ipaddr)] = output\n                siemplify.add_entity_insight(\n                    ipaddr, to_noise_insight(output), triggered_by=INTEGRATION_NAME\n                )\n                output_message = output_message + \" {},\".format(ipaddr)\n\n            elif res and res[\"riot\"]:\n                siemplify.result.add_json(str(ipaddr), res)\n                output = res\n                output_json[str(ipaddr)] = output\n                siemplify.add_entity_insight(\n                    ipaddr, to_riot_insight(output), triggered_by=INTEGRATION_NAME\n                )\n    \n                output_message = output_message + \" {},\".format(ipaddr)\n\n        except ValueError as e:\n            siemplify.LOGGER.info(\"Invalid Routable IP: {}\".format(ipaddr))\n            invalid_ips.append(ipaddr)\n            continue\n            \n        except RequestFailure as e:\n            siemplify.LOGGER.info(\"Unable to auth, please check API Key\")\n            output_message = \"Unable to auth, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n    \n        except RateLimitError as e:\n            siemplify.LOGGER.info(\"Daily rate limit reached, please check API Key\")\n            output_message = \"Daily rate limit reached, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n        \n        except Exception:\n            siemplify.LOGGER.info(\"Unknown Error Occurred\")\n            output_message = \"Unknown Error Occurred\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n    if output_json:\n        siemplify.result.add_result_json(\n            {\"results\": convert_dict_to_json_result_dict(output_json)}\n        )\n        \n    if invalid_ips and result_value:\n        invalid_ips_string = \"\"\n        for item in invalid_ips:\n            if invalid_ips_string == \"\":\n                invalid_ips_string = str(item)\n            else:\n                invalid_ips_string = invalid_ips_string + \", \" + str(item)\n        output_message = output_message + \" Invalid IPs skipped: {}\".format(invalid_ips_string)\n\n    siemplify.end(output_message, result_value, status)\n\n\ndef to_noise_insight(self):\n    content = \"\"\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong style='font-size: 17px'>\"\n        \"Noise: <span>{noise}</span></strong></td>\".format(noise=self[\"noise\"])\n    )\n    content += \"</tbody></table><br>\"\n    content += (\n        \"<p>This IP has been observed opportunistically scanning the internet \"\n        \"and is not directly targeting your organization.</p></br>\"\n    )\n    content += \"<table style='100%'><tbody>\"\n    if self[\"classification\"] == \"malicious\":\n        content += (\n            \"<tr><td style='text-align: left; width: 30%; color: red'><strong>\"\n            \"Classification: </strong></td><td style='text-align: left; width: 30%; \"\n            \"color: red'>{classification}</td>\"\n            \"</tr>\".format(classification=self[\"classification\"])\n        )\n    elif self[\"classification\"] == \"benign\":\n        content += (\n            \"<tr><td style='text-align: left; width: 30%; color: #1dbf11'><strong>\"\n            \"Classification: </strong></td><td style='text-align: left; width: 30%;\"\n            \" color: #1dbf11'>{classification}</td>\"\n            \"</tr>\".format(classification=self[\"classification\"])\n        )\n    else:\n        content += (\n            \"<tr><td style='text-align: left; width: 30%;'><strong>Classification: \"\n            \"</strong></td><td style='text-align: left; width: 30%;'>{classification}\"\n            \"</td></tr>\".format(classification=self[\"classification\"])\n        )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Name: </strong></td>\"\n        \"<td style='text-align: left; width: 30%;'>{name}</td></tr>\".format(\n            name=self[\"name\"]\n        )\n    )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Last Seen: </strong></td>\"\n        \"<td style='text-align: left; width: 30%;'>{last_seen}</td></tr>\".format(\n            last_seen=self[\"last_seen\"]\n        )\n    )\n    content += \"</tbody></table><br><br>\"\n    content += (\n        '<p><strong>More Info: <a target=\"_blank\" href=https://viz.greynoise.io/ip/'\n        \"{ip}>https://viz.greynoise.io/ip/{ip}</a></strong>&nbsp; </p>\".format(\n            ip=self[\"ip\"]\n        )\n    )\n\n    return content\n\n\ndef to_riot_insight(self):\n    content = \"\"\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong style='font-size: 17px;\"\n        \"color:#1dbf11'><span>Common Business Service</span></strong></td>\"\n    )\n    content += \"</tbody></table><br>\"\n    content += (\n        \"<p>This IP is from a known business services and can \"\n        \"most likely be trusted.</p></br>\"\n    )\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Name: </strong></td>\"\n        \"<td style='text-align: left; width: 30%;'>{name}</td></tr>\".format(\n            name=self[\"name\"]\n        )\n    )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Last Updated: </strong>\"\n        \"</td><td style='text-align: left; width: 30%;'>{last_updated}</td></tr>\".format(\n            last_updated=self[\"last_seen\"]\n        )\n    )\n    content += \"</tbody></table><br><br>\"\n    content += (\n        '<p><strong>More Info: <a target=\"_blank\" href=https://viz.greynoise.io/riot/'\n        \"{ip}>https://viz.greynoise.io/ip/{ip}</a></strong>&nbsp; </p>\".format(\n            ip=self[\"ip\"]\n        )\n    )\n\n    return content\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"GreyNoise","ScriptResultName":"success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\n  \"ip\": \"8.8.8.8\",\n  \"noise\": false,\n  \"riot\": true,\n  \"classification\": \"benign\",\n  \"name\": \"Google Public DNS\",\n  \"link\": \"https://viz.greynoise.io/riot/8.8.8.8\",\n  \"last_seen\": \"2021-06-21\",\n  \"message\": \"Success\"\n}","ShowResult":true}],"Creator":"Admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":53.0,"TimeoutSeconds":300,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}