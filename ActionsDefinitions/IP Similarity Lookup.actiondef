{"Name":"IP Similarity Lookup","Description":"Check an IP in GreyNoise to see if there are similar scanning IPs. Requires additional license to use.","Script":"from constants import USER_AGENT\nfrom greynoise import GreyNoise\nfrom greynoise.exceptions import RateLimitError, RequestFailure\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyDataModel import EntityTypes\nfrom SiemplifyUtils import convert_dict_to_json_result_dict, output_handler\n\nINTEGRATION_NAME = \"GreyNoise\"\n\nSCRIPT_NAME = \"IP Similarity Lookup\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n\n    api_key = siemplify.extract_configuration_param(\n        provider_name=INTEGRATION_NAME, param_name=\"GN API Key\"\n    )\n\n    session = GreyNoise(api_key=api_key, integration_name=USER_AGENT)\n\n    ips = [\n        entity\n        for entity in siemplify.target_entities\n        if entity.entity_type == EntityTypes.ADDRESS\n    ]\n    \n    minimum_score = siemplify.extract_action_param(\n        param_name=\"minimum_score\", default_value=\"90\", is_mandatory=False, print_value=True\n    )\n    try:\n        minimum_score = int(minimum_score)\n    except:\n            siemplify.LOGGER.info(\"Minimum Score does not appear to be a valid value\")\n            output_message = \"Minimum Score does not appear to be a valid value\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n\n        \n    limit = siemplify.extract_action_param(\n        param_name=\"limit\", default_value=\"50\", is_mandatory=False, print_value=True\n    )\n    try:\n        limit = int(limit)\n    except:\n            siemplify.LOGGER.info(\"Limit does not appear to be a valid value\")\n            output_message = \"Limit does not appear to be a valid value\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n\n    output_message = \"Successfully processed:\"\n    result_value = True\n    status = EXECUTION_STATE_COMPLETED\n    output_json = {}\n    invalid_ips = []\n    for ipaddr in ips:\n        siemplify.LOGGER.info(\"Started processing IP: {}\".format(ipaddr))\n\n        try:\n            res = session.similar(ipaddr, min_score=minimum_score, limit=limit)\n\n            if \"similar_ips\" in res:\n\n                siemplify.result.add_json(str(ipaddr), res)\n                output = res\n                output_json[str(ipaddr)] = output\n                siemplify.add_entity_insight(\n                    ipaddr, to_insight(output), triggered_by=INTEGRATION_NAME\n                )\n    \n                output_message = output_message + \" {},\".format(ipaddr)\n            else:\n                output = res\n                output[\"message\"] = \"Address has no similarity results.\"\n                siemplify.result.add_json(str(ipaddr), output)\n\n            output_json[str(ipaddr)] = output\n\n        except ValueError as e:\n            siemplify.LOGGER.info(e)\n            siemplify.LOGGER.info(\"Invalid Routable IP: {}\".format(ipaddr))\n            invalid_ips.append(ipaddr)\n            continue\n            \n        except RequestFailure as e:\n            siemplify.LOGGER.info(\"Unable to auth, please check API Key\")\n            output_message = \"Unable to auth, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n    \n        except RateLimitError as e:\n            siemplify.LOGGER.info(\"Daily rate limit reached, please check API Key\")\n            output_message = \"Daily rate limit reached, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n        \n        except Exception as e:\n            siemplify.LOGGER.info(e)\n            siemplify.LOGGER.info(\"Unknown Error Occurred\")\n            output_message = \"Unknown Error Occurred\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n    if output_json:\n        siemplify.result.add_result_json(\n            {\"results\": convert_dict_to_json_result_dict(output_json)}\n        )\n\n    if invalid_ips and result_value:\n        invalid_ips_string = \"\"\n        for item in invalid_ips:\n            if invalid_ips_string == \"\":\n                invalid_ips_string = str(item)\n            else:\n                invalid_ips_string = invalid_ips_string + \", \" + str(item)\n        output_message = output_message + \" Invalid IPs skipped: {}\".format(invalid_ips_string)\n\n    siemplify.end(output_message, result_value, status)\n    \ndef to_insight(self):\n    content = \"\"\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left;'><strong style='font-size: 17px'>\"\n        \"Total Number of Similar IPs: <span>{total}</span></strong></td>\".format(total=self[\"total\"])\n    )\n    content += \"</tbody></table><br>\"\n    content += \"<table style='100%'; border='1'; cellpadding='5'; cellspacing='5'><tbody>\"\n    content += \"<tr><th style='text-align:left'>IP</th><th style='text-align:left'>Score</th><th style='text-align:left'>Feature Match</th></tr>\"\n    for item in self[\"similar_ips\"][:10]:\n        content += \"<tr><td width='40%'>{ip}</td><td width='15%'>{score}</td><td>{feature}</td></tr>\".format(ip=item[\"ip\"],score=round(item[\"score\"]*100),feature=', '.join(item[\"features\"]))\n    content += \"</tbody></table><br>\"\n    content += \"<p>Only first 10 matches are displayed</p><br><br>\"\n    content += (\n        '<p><strong>More Info: <a target=\"_blank\" href=https://viz.greynoise.io/ip-similarity/'\n        \"{ip}>https://viz.greynoise.io/ip-similarity/{ip}</a></strong>&nbsp; </p>\".format(\n            ip=self[\"ip\"][\"ip\"]\n        )\n    )\n\n    return content\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"GreyNoise","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":true}],"Creator":"5773731e-9b72-438e-893d-ad4b9a297423","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":33.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"50","Description":"Maximum number of similarity results to return","Name":"limit","Value":"50","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"90","Description":"The minimum simlarity score to return in the results.","Name":"minimum_score","Value":"90","Type":15,"OptionalValues":["75","80","85","90","95","100"],"OptionalValuesJson":"[\"75\",\"80\",\"85\",\"90\",\"95\",\"100\"]"}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}