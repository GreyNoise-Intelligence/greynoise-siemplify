{"Name":"IP Timeline Lookup","Description":"Retrieve Daily Scanning events for an IP. Requires additional license to use. Consumes 1 Search per valid IP submitted.","Script":"from constants import USER_AGENT\nfrom greynoise import GreyNoise\nfrom greynoise.exceptions import RateLimitError, RequestFailure\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyDataModel import EntityTypes\nfrom SiemplifyUtils import convert_dict_to_json_result_dict, output_handler\n\nINTEGRATION_NAME = \"GreyNoise\"\n\nSCRIPT_NAME = \"IP Timeline Lookup\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n\n    api_key = siemplify.extract_configuration_param(\n        provider_name=INTEGRATION_NAME, param_name=\"GN API Key\"\n    )\n\n    session = GreyNoise(api_key=api_key, integration_name=USER_AGENT)\n\n    ips = [\n        entity for entity in siemplify.target_entities if entity.entity_type == EntityTypes.ADDRESS\n    ]\n\n    days = siemplify.extract_action_param(\n        param_name=\"days\", default_value=\"30\", is_mandatory=False, print_value=True\n    )\n    try:\n        days = int(days)\n    except:\n        siemplify.LOGGER.info(\"Days does not appear to be a valid value\")\n        output_message = \"Days does not appear to be a valid value\"\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n\n    limit = siemplify.extract_action_param(\n        param_name=\"limit\", default_value=\"50\", is_mandatory=False, print_value=True\n    )\n    try:\n        limit = int(limit)\n    except:\n        siemplify.LOGGER.info(\"Limit does not appear to be a valid value\")\n        output_message = \"Limit does not appear to be a valid value\"\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n\n    output_message = \"Successfully processed:\"\n    result_value = True\n    status = EXECUTION_STATE_COMPLETED\n    output_json = {}\n    invalid_ips = []\n    for ipaddr in ips:\n        siemplify.LOGGER.info(\"Started processing IP: {}\".format(ipaddr))\n\n        try:\n            res = session.timelinedaily(ipaddr, days=days, limit=limit)\n\n            if \"activity\" in res and len(res[\"activity\"]) >= 1:\n                siemplify.result.add_json(str(ipaddr), res)\n                output = res\n                output_json[str(ipaddr)] = output\n\n                siemplify.add_entity_insight(\n                    ipaddr, to_insight(output), triggered_by=INTEGRATION_NAME\n                )\n\n                output_message = output_message + \" {},\".format(ipaddr)\n            else:\n                output = res\n                output[\"message\"] = \"Address has no timeline events.\"\n                siemplify.result.add_json(str(ipaddr), output)\n\n            output_json[str(ipaddr)] = output\n\n        except ValueError as e:\n            siemplify.LOGGER.info(e)\n            siemplify.LOGGER.info(\"Invalid Routable IP: {}\".format(ipaddr))\n            invalid_ips.append(ipaddr)\n            continue\n\n        except RequestFailure as e:\n            siemplify.LOGGER.info(\"Unable to auth, please check API Key\")\n            output_message = \"Unable to auth, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n        except RateLimitError as e:\n            siemplify.LOGGER.info(\"Daily rate limit reached, please check API Key\")\n            output_message = \"Daily rate limit reached, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n        except Exception as e:\n            siemplify.LOGGER.info(e)\n            siemplify.LOGGER.info(\"Unknown Error Occurred\")\n            output_message = \"Unknown Error Occurred\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n    if output_json:\n        siemplify.result.add_result_json({\"results\": convert_dict_to_json_result_dict(output_json)})\n\n    if invalid_ips and result_value:\n        invalid_ips_string = \"\"\n        for item in invalid_ips:\n            if invalid_ips_string == \"\":\n                invalid_ips_string = str(item)\n            else:\n                invalid_ips_string = invalid_ips_string + \", \" + str(item)\n        output_message = output_message + \" Invalid IPs skipped: {}\".format(invalid_ips_string)\n\n    siemplify.end(output_message, result_value, status)\n\n\ndef to_insight(self):\n    content = \"\"\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left;'><strong style='font-size: 17px'>\"\n        \"Daily Internet Scanning Activies</span></strong></td>\"\n    )\n    content += \"</tbody></table><br>\"\n    content += \"<table style='100%'; border='1'; cellpadding='5'; cellspacing='5'><tbody>\"\n    content += \"<tr><th style='text-align:left'>Date</th><th style='text-align:left'>Classification</th><th style='text-align:left'>Tags</th></tr>\"\n    for item in self[\"activity\"][:10]:\n        tag_list = []\n        for tag in item[\"tags\"]:\n            tag_list.append(tag[\"name\"])\n        content += \"<tr><td width='25%'>{date}</td><td width='30%'>{classification}</td><td>{tags}</td></tr>\".format(\n            date=item[\"timestamp\"].split(\"T\")[0],\n            classification=item[\"classification\"],\n            tags=\", \".join(tag_list),\n        )\n    content += \"</tbody></table><br>\"\n    content += \"<p>Only first 10 matches are displayed</p><br><br>\"\n    content += (\n        '<p><strong>More Info: <a target=\"_blank\" href=https://viz.greynoise.io/ip/'\n        \"{ip}?view=timeline>https://viz.greynoise.io/ip/{ip}?view=timeline</a></strong>&nbsp; </p>\".format(\n            ip=self[\"ip\"]\n        )\n    )\n    return content\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"GreyNoise","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"results\": [{\"Entity\": \"111.20.101.91\", \"EntityResult\": {\"activity\": [{\"timestamp\": \"2023-08-14T00:00:00Z\", \"country\": \"China\", \"country_code\": \"CN\", \"asn\": \"AS9808\", \"region\": \"Sichuan\", \"city\": \"Chengdu\", \"category\": \"isp\", \"rdns\": \"\", \"organization\": \"China Mobile Communications Group Co., Ltd.\", \"vpn\": false, \"vpn_service\": \"\", \"tor\": false, \"spoofable\": true, \"destinations\": [{\"country\": \"United States\", \"country_code\": \"US\"}], \"protocols\": [{\"transport_protocol\": \"TCP\", \"port\": 80}, {\"transport_protocol\": \"TCP\", \"port\": 8080}, {\"transport_protocol\": \"TCP\", \"app_protocol\": \"TELNET\", \"port\": 2323}, {\"transport_protocol\": \"TCP\", \"app_protocol\": \"HTTP\", \"port\": 80}, {\"transport_protocol\": \"TCP\", \"port\": 2323}, {\"transport_protocol\": \"TCP\", \"port\": 21635}], \"classification\": \"unknown\", \"tags\": [{\"name\": \"Web Crawler\", \"description\": \"IP addresses with this tag have been seen crawling HTTP(S) servers around the Internet.\", \"category\": \"activity\", \"intention\": \"unknown\"}], \"ja3_fingerprints\": [], \"hassh_fingerprints\": [], \"http_paths\": [], \"http_user_agents\": []}], \"metadata\": {\"start_time\": \"2023-07-16T00:00:00Z\", \"end_time\": \"2023-08-15T16:00:39.815261684Z\", \"ip\": \"111.20.101.91\", \"limit\": 1, \"next_cursor\": \"b2Zmc2V0PTE=\"}, \"ip\": \"111.20.101.91\"}}]}","ShowResult":true}],"Creator":"5773731e-9b72-438e-893d-ad4b9a297423","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":16.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"30","Description":"Number of days from today to retrieve timeline information","Name":"days","Value":"30","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"50","Description":"Maximum number of timeline events to return","Name":"limit","Value":"50","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}