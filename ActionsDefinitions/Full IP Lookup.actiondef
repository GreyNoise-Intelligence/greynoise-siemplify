{"Name":"Full IP Lookup","Description":"Query an IP in the GreyNoise Noise AND RIOT Dataset. Consumes up to 3 Searches per valid IP submitted.  Leverages the Quick, IP Context and IP RIOT lookups in a single command for simplified use.","Script":"from constants import USER_AGENT\nfrom greynoise import GreyNoise\nfrom greynoise.exceptions import RateLimitError, RequestFailure\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyDataModel import EntityTypes\nfrom SiemplifyUtils import convert_dict_to_json_result_dict, output_handler\n\nINTEGRATION_NAME = \"GreyNoise\"\n\nSCRIPT_NAME = \"Context IP Lookup\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n\n    api_key = siemplify.extract_configuration_param(\n        provider_name=INTEGRATION_NAME, param_name=\"GN API Key\"\n    )\n\n    session = GreyNoise(api_key=api_key, integration_name=USER_AGENT)\n\n    ips = [\n        entity for entity in siemplify.target_entities if entity.entity_type == EntityTypes.ADDRESS\n    ]\n\n    output_message = \"Successfully processed:\"\n    result_value = True\n    status = EXECUTION_STATE_COMPLETED\n    output_json = {}\n    invalid_ips = []\n    for ipaddr in ips:\n        siemplify.LOGGER.info(\"Started processing IP: {}\".format(ipaddr))\n\n        try:\n            res = session.quick(str(ipaddr))\n            if len(res) >= 1:\n                if res[0][\"noise\"] and not res[0][\"riot\"] :\n                    noise_res = session.ip(ipaddr)\n                    siemplify.result.add_json(str(ipaddr), noise_res)\n                    output = noise_res\n                    output[\"noise\"] = True\n                    output_json[str(ipaddr)] = output\n                    siemplify.add_entity_insight(\n                        ipaddr, to_noise_insight(output), triggered_by=INTEGRATION_NAME\n                    )\n    \n                    output_message = output_message + \" {},\".format(ipaddr)\n                    \n                if res[0][\"riot\"] and not res[0][\"noise\"]:\n                    riot_res = session.riot(ipaddr)\n                    siemplify.result.add_json(str(ipaddr), riot_res)\n                    output = riot_res\n                    output_json[str(ipaddr)] = output\n                    siemplify.add_entity_insight(\n                        ipaddr, to_riot_insight(output), triggered_by=INTEGRATION_NAME\n                    )\n    \n                    output_message = output_message + \" {},\".format(ipaddr)\n                    \n                if res[0][\"riot\"] and res[0][\"noise\"]:\n                    noise_res = session.ip(ipaddr)\n                    riot_res = session.riot(ipaddr)\n                    merged_res = noise_res.copy()\n                    merged_res.update(riot_res)\n                    siemplify.result.add_json(str(ipaddr), merged_res)\n                    output = merged_res\n                    output[\"noise\"] = True\n                    output_json[str(ipaddr)] = output\n                    siemplify.add_entity_insight(\n                        ipaddr, to_noise_insight(noise_res), triggered_by=INTEGRATION_NAME\n                    )\n                    siemplify.add_entity_insight(\n                        ipaddr, to_riot_insight(riot_res), triggered_by=INTEGRATION_NAME\n                    )\n    \n                    output_message = output_message + \" {},\".format(ipaddr)\n                \n                if not res[0][\"noise\"] and not res[0][\"riot\"]:\n                    output = res[0]\n                    output[\"seen\"] = False\n                    output[\n                        \"message\"\n                    ] = \"Address has not been observed mass-scanning the internet by GreyNoise in the last 90 days.\"\n                    siemplify.result.add_json(str(ipaddr), output)\n            \n            else:\n                siemplify.LOGGER.info(\"Invalid Routable IP: {}\".format(ipaddr))\n                invalid_ips.append(ipaddr)\n\n\n        except ValueError as e:\n            siemplify.LOGGER.info(\"Invalid Routable IP: {}\".format(ipaddr))\n            invalid_ips.append(ipaddr)\n            continue\n\n        except RequestFailure as e:\n            siemplify.LOGGER.info(\"Unable to auth, please check API Key\")\n            output_message = \"Unable to auth, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n        except RateLimitError as e:\n            siemplify.LOGGER.info(\"Daily rate limit reached, please check API Key\")\n            output_message = \"Daily rate limit reached, please check API Key\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n        except Exception as e:\n            print(e)\n            siemplify.LOGGER.info(\"Unknown Error Occurred\")\n            output_message = \"Unknown Error Occurred\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            break\n\n    if output_json:\n        siemplify.result.add_result_json({\"results\": convert_dict_to_json_result_dict(output_json)})\n\n    if invalid_ips and result_value:\n        invalid_ips_string = \"\"\n        for item in invalid_ips:\n            if invalid_ips_string == \"\":\n                invalid_ips_string = str(item)\n            else:\n                invalid_ips_string = invalid_ips_string + \", \" + str(item)\n        output_message = output_message + \" Invalid IPs skipped: {}\".format(invalid_ips_string)\n\n    siemplify.end(output_message, result_value, status)\n\n\ndef to_noise_insight(self):\n    content = \"\"\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong style='font-size: 17px'>\"\n        \"Noise: <span>{noise}</span></strong></td>\".format(noise=self[\"seen\"])\n    )\n    content += \"</tbody></table><br>\"\n    content += (\n        \"<p>This IP has been observed opportunistically scanning the internet \"\n        \"and is not directly targeting your organization.</p></br>\"\n    )\n    content += \"<table style='100%'><tbody>\"\n    if self[\"classification\"] == \"malicious\":\n        content += (\n            \"<tr><td style='text-align: left; width: 30%; color: red'><strong>\"\n            \"Classification: </strong></td><td style='text-align: left; width: 30%; \"\n            \"color: red'>{classification}</td>\"\n            \"</tr>\".format(classification=self[\"classification\"])\n        )\n    elif self[\"classification\"] == \"benign\":\n        content += (\n            \"<tr><td style='text-align: left; width: 30%; color: #1dbf11'><strong>\"\n            \"Classification: </strong></td><td style='text-align: left; width: 30%;\"\n            \" color: #1dbf11'>{classification}</td>\"\n            \"</tr>\".format(classification=self[\"classification\"])\n        )\n    else:\n        content += (\n            \"<tr><td style='text-align: left; width: 30%;'><strong>Classification: \"\n            \"</strong></td><td style='text-align: left; width: 30%;'>{classification}\"\n            \"</td></tr>\".format(classification=self[\"classification\"])\n        )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Last Seen: </strong></td>\"\n        \"<td style='text-align: left; width: 30%;'>{last_seen}</td></tr>\".format(\n            last_seen=self[\"last_seen\"]\n        )\n    )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Organization: </strong>\"\n        \"</td><td style='text-align: left; width: 30%;'>{organization}</td></tr>\".format(\n            organization=self[\"metadata\"][\"organization\"]\n        )\n    )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Country: </strong></td>\"\n        \"<td style='text-align: left; width: 30%;'>{organization}</td></tr>\".format(\n            organization=self[\"metadata\"][\"country\"]\n        )\n    )\n    content += \"</tbody></table><br><br>\"\n    content += (\n        '<p><strong>More Info: <a target=\"_blank\" href=https://viz.greynoise.io/ip/'\n        \"{ip}>https://viz.greynoise.io/ip/{ip}</a></strong>&nbsp; </p>\".format(ip=self[\"ip\"])\n    )\n\n    return content\n    \ndef to_riot_insight(self):\n    content = \"\"\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong style='font-size: 17px;\"\n        \"color:#7CFC00'><span>Benign Service</span></strong></td>\"\n    )\n    content += \"</tbody></table><br>\"\n    content += (\n        \"<p>This IP is from a known harmless services and/or organizations and can \"\n        \"most likely be trusted.</p></br>\"\n    )\n    content += \"<table style='100%'><tbody>\"\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Name: </strong></td>\"\n        \"<td style='text-align: left; width: 30%;'>{name}</td></tr>\".format(name=self[\"name\"])\n    )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Category: </strong></td>\"\n        \"<td style='text-align: left; width: 30%;'>{category}</td></tr>\".format(\n            category=self[\"category\"]\n        )\n    )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Last Updated: </strong>\"\n        \"</td><td style='text-align: left; width: 30%;'>{last_updated}</td></tr>\".format(\n            last_updated=self[\"last_updated\"]\n        )\n    )\n    content += (\n        \"<tr><td style='text-align: left; width: 30%;'><strong>Explanation: </strong>\"\n        \"</td><td style='text-align: left; width: 30%;'>{explanation}</td></tr>\".format(\n            explanation=self[\"explanation\"]\n        )\n    )\n    content += \"</tbody></table><br><br>\"\n    content += (\n        '<p><strong>More Info: <a target=\"_blank\" href=https://viz.greynoise.io/riot/'\n        \"{ip}>https://viz.greynoise.io/riot/{ip}</a></strong>&nbsp; </p>\".format(ip=self[\"ip\"])\n    )\n    return content\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"GreyNoise","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"results\": [{\"Entity\": \"66.249.65.163\", \"EntityResult\": {\"ip\": \"66.249.65.163\", \"first_seen\": \"2019-01-31\", \"last_seen\": \"2023-08-15\", \"seen\": true, \"tags\": [\"GoogleBot\", \"Web Crawler\"], \"actor\": \"GoogleBot\", \"spoofable\": false, \"classification\": \"benign\", \"cve\": [], \"bot\": false, \"vpn\": false, \"vpn_service\": \"N/A\", \"metadata\": {\"asn\": \"AS15169\", \"city\": \"Dallas\", \"country\": \"United States\", \"country_code\": \"US\", \"organization\": \"Google LLC\", \"category\": \"hosting\", \"tor\": false, \"rdns\": \"crawl-66-249-65-163.googlebot.com\", \"os\": \"unknown\", \"sensor_count\": 1, \"sensor_hits\": 4, \"region\": \"Texas\", \"destination_countries\": [\"United States\"], \"destination_country_codes\": [\"US\"], \"source_country\": \"United States\", \"source_country_code\": \"US\"}, \"raw_data\": {\"scan\": [{\"port\": 80, \"protocol\": \"TCP\"}], \"web\": {\"paths\": [\"/robots.txt\", \"/index.php\"]}, \"ja3\": [], \"hassh\": []}, \"riot\": true, \"category\": \"software\", \"name\": \"Google APIs and Services\", \"description\": \"Google LLC is an American multinational technology company that specializes in Internet-related services and products, which include online advertising technologies, a search engine, cloud computing, software, and hardware.\", \"explanation\": \"Trusted commercial software commonly used by individuals and businesses for collaboration, content creation, entertainment, or various other functions. You may see devices communicating with Google APIs and Services during authentication, system/application update, cloud storage access, or resource retrieval.\", \"last_updated\": \"2023-08-15T13:11:03Z\", \"reference\": \"https://google.com/\", \"trust_level\": \"1\", \"noise\": true}}]}","ShowResult":true}],"Creator":"5773731e-9b72-438e-893d-ad4b9a297423","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":16.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}